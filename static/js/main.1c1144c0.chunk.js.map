{"version":3,"sources":["Map/pin.js","Map/index.js","App.js","serviceWorker.js","index.js"],"names":["pinStyle","fill","stroke","Pin","props","size","height","viewBox","style","d","accessToken","geolocateStyle","float","margin","padding","Map","userPosition","useState","width","zoom","viewport","setViewport","mapRef","useRef","originMarker","setOriginMarker","className","ref","onViewportChange","mapStyle","mapboxApiAccessToken","draggable","offsetTop","offsetLeft","onDragEnd","event","longitude","lngLat","latitude","positionOptions","enableHighAccuracy","trackUserLocation","App","setUserPosition","errorMessage","setErrorMessage","useEffect","onClick","a","async","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","error","coords","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","newErrorMessage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"gNAMMA,EAAW,CACfC,KAAM,OACNC,OAAQ,QAiBKC,EAdH,SAAAC,GAAU,IAAD,EACGA,EAAdC,YADW,MACJ,GADI,EAGnB,OACE,yBACEC,OAAQD,EACRE,QAAQ,YACRC,MAAOR,GAEP,0BAAMS,EAlBF,8Q,gBCOJC,EACJ,2FAEIC,EAAiB,CACrBC,MAAO,OACPC,OAAQ,OACRC,QAAS,QA+EIC,EA5EH,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EACAC,mBAAS,eACpCD,EADmC,CAEtCE,MAAO,QACPZ,OAAQ,QACRa,KAAM,MALwB,mBACzBC,EADyB,KACfC,EADe,KAQ1BC,EAASC,mBARiB,EAa5BN,mBAAS,eACRD,IAd2B,mBAW9BQ,EAX8B,KAY9BC,EAZ8B,OAoB5BR,mBAAS,MApBmB,6BA8BhC,OACE,6BACE,yBAAKS,UAAU,OACb,kBAAC,IAAD,eACEC,IAAKL,GACDF,EAFN,CAGEQ,iBAAkB,SAAAR,GAAQ,OACxBC,EAAYD,IAEdS,SAAS,sCACTC,qBAAsBpB,IAEtB,kBAAC,IAAD,CACEkB,iBArB2B,SAAAR,GAKnCC,EAAYD,IAmBJE,OAAQA,EACRQ,qBAAsBpB,IAExB,kBAAC,IAAD,iBACMc,EADN,CAEEO,WAAS,EACTC,WAAY,GACZC,YAAa,GACbC,UAAW,SAAAC,GAAK,OACdV,EAAgB,CACdW,UAAWD,EAAME,OAAO,GACxBC,SAAUH,EAAME,OAAO,QAI3B,kBAAC,EAAD,CAAKhC,KAAM,MAEb,kBAAC,IAAD,CACEG,MAAOG,EACP4B,gBAAiB,CACfC,oBAAoB,GAEtBC,mBAAmB,QCRhBC,EA/DH,WAAO,IAAD,EAIZzB,mBAAS,MAJG,mBAEdD,EAFc,KAGd2B,EAHc,OASZ1B,mBAAS,MATG,mBAOd2B,EAPc,KAQdC,EARc,KAWhBC,qBAAU,cAAU,IAkCpB,OACE,6BACG9B,EACC,kBAAC,EAAD,CAAKA,aAAcA,IAEnB,6BACE,4BAAQ+B,QAtCI,8BAAAC,EAAAC,OAAA,2EAAAD,EAAA,MArBb,IAAIE,SAAQ,SAACC,EAASC,GAC3BC,UAAUC,YAAYC,oBACpB,SAAAC,GAAQ,OAAIL,EAAQK,MACpB,SAAAC,GAAK,OAAIL,EAAOK,UAkBA,OAEVD,EAFU,OAGVxC,EAAe,CACnBsB,SAAUkB,EAASE,OAAOpB,SAC1BF,UAAWoB,EAASE,OAAOtB,WAE7BO,EAAgB3B,GAPA,qDAUR,KAAM2C,KAVE,cAWT,KAAMC,kBAXG,UAeT,KAAMC,qBAfG,UAmBT,KAAMC,QAnBG,UAuBT,KAAMC,cAvBG,2BAYZC,EACE,2CAbU,oCAgBZA,EACE,uCAjBU,oCAoBZA,EACE,8CArBU,oCAwBZA,EACE,6BAzBU,6BA4BhBnB,EAAgBmB,GA5BA,0DAsCZ,qBAGCpB,GACC,8BAAOA,MC1DCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,QD4HpB,kBAAmBpB,WACrBA,UAAUqB,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1c1144c0.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst pinStyle = {\n  fill: \"#d00\",\n  stroke: \"none\"\n};\n\nconst Pin = props => {\n  const { size = 20 } = props;\n\n  return (\n    <svg\n      height={size}\n      viewBox=\"0 0 24 24\"\n      style={pinStyle}\n    >\n      <path d={ICON} />\n    </svg>\n  );\n};\n\nexport default Pin;\n","import React, { useState, useRef } from \"react\";\r\nimport ReactMapGL, {\r\n  GeolocateControl,\r\n  Marker\r\n} from \"react-map-gl\";\r\nimport Pin from \"./pin\";\r\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\r\nimport Geocoder from \"react-map-gl-geocoder\";\r\n\r\nconst accessToken =\r\n  \"pk.eyJ1IjoicnVuYXJmIiwiYSI6ImNrNGR6MHFqejAxcnUzZXJ2and2OHdpaGoifQ.AIIRbX4IQotcSMyWX4ga5Q\";\r\n\r\nconst geolocateStyle = {\r\n  float: \"left\",\r\n  margin: \"50px\",\r\n  padding: \"10px\"\r\n};\r\n\r\nconst Map = ({ userPosition }) => {\r\n  const [viewport, setViewport] = useState({\r\n    ...userPosition,\r\n    width: \"100vw\",\r\n    height: \"100vh\",\r\n    zoom: 16\r\n  });\r\n\r\n  const mapRef = useRef();\r\n\r\n  const [\r\n    originMarker,\r\n    setOriginMarker\r\n  ] = useState({\r\n    ...userPosition\r\n  });\r\n\r\n  const [\r\n    destinationMarker,\r\n    setDestinationMarker\r\n  ] = useState(null);\r\n\r\n  const handleGeocoderViewportChange = viewport => {\r\n    const geocoderDefaultOverrides = {\r\n      transitionDuration: 1000\r\n    };\r\n\r\n    setViewport(viewport);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"map\">\r\n        <ReactMapGL\r\n          ref={mapRef}\r\n          {...viewport}\r\n          onViewportChange={viewport =>\r\n            setViewport(viewport)\r\n          }\r\n          mapStyle=\"mapbox://styles/mapbox/satellite-v9\"\r\n          mapboxApiAccessToken={accessToken}\r\n        >\r\n          <Geocoder\r\n            onViewportChange={\r\n              handleGeocoderViewportChange\r\n            }\r\n            mapRef={mapRef}\r\n            mapboxApiAccessToken={accessToken}\r\n          />\r\n          <Marker\r\n            {...originMarker}\r\n            draggable\r\n            offsetTop={-20}\r\n            offsetLeft={-10}\r\n            onDragEnd={event =>\r\n              setOriginMarker({\r\n                longitude: event.lngLat[0],\r\n                latitude: event.lngLat[1]\r\n              })\r\n            }\r\n          >\r\n            <Pin size={20} />\r\n          </Marker>\r\n          <GeolocateControl\r\n            style={geolocateStyle}\r\n            positionOptions={{\r\n              enableHighAccuracy: true\r\n            }}\r\n            trackUserLocation={true}\r\n          />\r\n        </ReactMapGL>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React, {\r\n  useState,\r\n  useEffect\r\n} from \"react\";\r\nimport Map from \"./Map\";\r\n\r\nconst getLocationPromise = () => {\r\n  return new Promise((resolve, reject) => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      position => resolve(position),\r\n      error => reject(error)\r\n    );\r\n  });\r\n};\r\n\r\nconst App = () => {\r\n  const [\r\n    userPosition,\r\n    setUserPosition\r\n  ] = useState(null);\r\n\r\n  const [\r\n    errorMessage,\r\n    setErrorMessage\r\n  ] = useState(null);\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  const getLocation = async () => {\r\n    try {\r\n      const position = await getLocationPromise();\r\n      const userPosition = {\r\n        latitude: position.coords.latitude,\r\n        longitude: position.coords.longitude\r\n      };\r\n      setUserPosition(userPosition);\r\n    } catch (error) {\r\n      let newErrorMessage;\r\n      switch (error.code) {\r\n        case error.PERMISSION_DENIED:\r\n          newErrorMessage =\r\n            \"User denied the request for Geolocation.\";\r\n          break;\r\n        case error.POSITION_UNAVAILABLE:\r\n          newErrorMessage =\r\n            \"Location information is unavailable.\";\r\n          break;\r\n        case error.TIMEOUT:\r\n          newErrorMessage =\r\n            \"The request to get user location timed out.\";\r\n          break;\r\n        case error.UNKNOWN_ERROR:\r\n          newErrorMessage =\r\n            \"An unknown error occurred.\";\r\n          break;\r\n      }\r\n      setErrorMessage(newErrorMessage);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {userPosition ? (\r\n        <Map userPosition={userPosition} />\r\n      ) : (\r\n        <div>\r\n          <button onClick={getLocation}>\r\n            Get your location\r\n          </button>\r\n          {errorMessage && (\r\n            <span>{errorMessage}</span>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"app\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}